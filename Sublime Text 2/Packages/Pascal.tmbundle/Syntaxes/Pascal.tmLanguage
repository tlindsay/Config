<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pas</string>
		<string>p</string>
		<string>inc</string>
		<string>pp</string>
	</array>
	<key>foldingStartMarker</key>
	<string>^\s*\b(?i:(begin))\b|^\s*\b(\w+)\b\s+=\s+(?i:(class|object|objcclass|objccategory|objcprotocol|interface))\b$|^\s*\b(\w+)\b\s+=\s+(?i:(class|object|objcclass|objccategory|objcprotocol|interface))\b\s*(external)*\s*\(.*\)$|^\s*\b(\w+)\b\s+=\s+(?i:(record))\b|^\s*(?i:(case))\s+(\w+)\s+(?i:(of))</string>
	<key>foldingStopMarker</key>
	<string>\b(?i:(end))\b</string>
	<key>keyEquivalent</key>
	<string>^~P</string>
	<key>name</key>
	<string>Pascal</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>^\b(?i:(implementation))\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.implementation.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\b(?i:(end))\b\.</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.implementation.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#implementation_scope</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.interface.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\b(?i:(interface))\b</string>
			<key>name</key>
			<string>meta.interface.pascal</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\b(?i:uses)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>;</string>
			<key>name</key>
			<string>meta.scope.uses.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#uses_scope</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*\b(\w+)\b\s+=\s+(?i:(class|object|objcclass|objccategory|objcprotocol|interface))\b\s*(external)*\s*(\((.*)\))*$</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.class.definition.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>storage.class.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.class.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class_scope</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(\w+)\s*=\s*(?i:(bitpacked)\s+)*(?i:(record))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.type.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>A record was declared</string>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.record.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#record_scope</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.other.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(\w+)\b\s*=\s*([0-9\-$.]+);</string>
			<key>name</key>
			<string>meta.const.numeric.definition.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.other.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.value.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(\w+)\b\s*=\s*(?i:(true|false));</string>
			<key>name</key>
			<string>meta.const.boolean.definition.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.other.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(\w+)\b\s*=\s*'(.*)';</string>
			<key>name</key>
			<string>meta.const.string.definition.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.type.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.language.type.pointer.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(\w+)\s+=\s+\^(\w+);</string>
			<key>name</key>
			<string>meta.type.pointer.pascal</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*\b([A-Z]+\w+)\b\s*=</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.type.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.type.definition.pascal</string>
			<key>end</key>
			<string>;</string>
			<key>name</key>
			<string>meta.type.definition.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_scope</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.type.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.language.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.language.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>constant.other.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(\w+)\s*=\s*(?i:(set))\s+(?i:(of))\s*\((.*)\);</string>
			<key>name</key>
			<string>meta.type.definition.set.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.pascal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>A function was declared outside of the implementation scope</string>
			<key>match</key>
			<string>^\s*\b(?i:(function|procedure))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.function.declared.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.bookmark.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\{@!\s*(.*)\s*\}</string>
			<key>name</key>
			<string>meta.bookmark.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.method</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Inherited method statement</string>
			<key>match</key>
			<string>^\s*(?i:(inherited))\s+(\w+)</string>
			<key>name</key>
			<string>meta.function.inherited.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.class.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>@(\w+)\.(\w+)</string>
			<key>name</key>
			<string>meta.method.pointer.pascal</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*\b(?i:begin)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:end)\b</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.begin.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#begin_end_scope</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(constructor|destructor|property|function|procedure|class|object|shl|strict|bitpacked|continue|is|as|break|read|write|implements|library|real|ansistring|single|double|pchar|self|try|except|on|exception|exports|dispose|result|univ|exit|halt|return|blockzero|char|pointer|new|writeln|sizeof|forward|uses|const|cycle|var|class|object|record|type|implementation|interface|begin|end|integer|boolean|longint|and|array|case|div|do|downto|else|file|for|goto|if|in|inherited|inline|label|leave|mod|not|of|or|otherwise|packed|program|public|private|protected|published|repeat|set|string|then|to|until|unit|while|with))\b</string>
			<key>name</key>
			<string>keyword.control.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Built-in functions that are so common they seem as control keywords</string>
			<key>match</key>
			<string>\b(?i:(trunc|round|length|high|low|assigned))\b</string>
			<key>name</key>
			<string>keyword.common.function.pascal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These match common framework function prefixes like, CoreFoundation, FileManager, HIView, CoreGraphics, QuickDraw</string>
			<key>match</key>
			<string>\b(CF|FS|HI|CG|QD)\w+\b</string>
			<key>name</key>
			<string>variable.language.type.apple</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These match common framework classes prefixes like AppKit, Foundation, UIKit</string>
			<key>match</key>
			<string>\b(NS|UI|CI)\w+\b</string>
			<key>name</key>
			<string>storage.class.apple</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This will match Pascal classes, types or interfaces starting with T or I followed by another captial like TObject or IObjectInterface.</string>
			<key>match</key>
			<string>\b(T|I)+[A-Z]\w+\b</string>
			<key>name</key>
			<string>storage.class.pascal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Common Cocoa methods.</string>
			<key>match</key>
			<string>\.(alloc|init|release|retain|autorelease)+</string>
			<key>name</key>
			<string>storage.method.cocoa.pascal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This will match Pascal constants starting with k followed by another captial like kSomeValue.</string>
			<key>match</key>
			<string>\bk[A-Z]\w+\b</string>
			<key>name</key>
			<string>constant.other.pascal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(id|sel))\b</string>
			<key>name</key>
			<string>constant.language.objp</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(true|false|nil))\b</string>
			<key>name</key>
			<string>constant.language.value.pascal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\$\w+</string>
			<key>name</key>
			<string>constant.numeric.address</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(objcclass|objccategory|objcprotocol|objcselector|message|optional|required))\b</string>
			<key>name</key>
			<string>keyword.objective-pascal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Common types from MacTypes.pas.</string>
			<key>match</key>
			<string>\b(?i:(str255|str63|str15|str31|sint8|uint8|sint16|uint16|sint32|uint32|sint64|uint64|sint8ptr|uint8ptr|sint16ptr|uint16ptr|sint32ptr|uint32ptr|sint64ptr|uint64ptr))\b</string>
			<key>name</key>
			<string>constant.language.mac-types.pascal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Pointer variables ending in Ptr or Pointer.</string>
			<key>match</key>
			<string>\b[a-z]+\w+(Ptr|Pointer)\b</string>
			<key>name</key>
			<string>variable.language.variable.pointers.pascal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Pointer types ending in Ptr or Pointer.</string>
			<key>match</key>
			<string>\b[A-Z]+\w+(Ptr|Pointer)\b</string>
			<key>name</key>
			<string>variable.language.type.pointers.pascal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(overload|static|external|virtual|abstract|alias|cdecl|export|pascal|mwpascal|override|varargs))\b</string>
			<key>name</key>
			<string>keyword.modifiers.pascal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
			<key>name</key>
			<string>constant.numeric.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(--).*$\n?</string>
			<key>name</key>
			<string>comment.line.double-dash.pascal.one</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(//).*$\n?</string>
			<key>name</key>
			<string>comment.line.double-slash.pascal.two</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\(\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*\)</string>
			<key>name</key>
			<string>comment.block.pascal.one</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>comment.block.pascal.two</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\$\w+</string>
					<key>name</key>
					<string>comment.compiler-directive.pascal</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>name</key>
			<string>punctuation.definition.comment.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\$\w+</string>
					<key>name</key>
					<string>comment.compiler-directive.pascal</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.pascal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Double quoted strings are an extension and (generally) support C-style escape sequences.</string>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.pascal</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>''</string>
					<key>name</key>
					<string>constant.character.escape.apostrophe.pascal</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>begin_end_block</key>
		<dict>
			<key>begin</key>
			<string>^\s*\b(?i:(begin|case))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*\b(?i:end)\b</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.scope.begin.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#begin_end_scope</string>
				</dict>
			</array>
		</dict>
		<key>begin_end_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_called_noparams</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#begin_end_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>class_field</key>
		<dict>
			<key>begin</key>
			<string>^\s*([a-zA-Z0-9_, ]+)\s*:</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.field.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.class.field.pascal</string>
			<key>end</key>
			<string>;</string>
			<key>name</key>
			<string>meta.class.field.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>class_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#class_section</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_class_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#record_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class_field</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>class_section</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.pascal</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.class.section.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\{[^$](.*)\}</string>
			<key>name</key>
			<string>meta.class.section.pascal</string>
		</dict>
		<key>defined_set_constants</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.other.set.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\((.*)\)</string>
			<key>name</key>
			<string>meta.set.declared.pascal</string>
		</dict>
		<key>function_call_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_called_noparams</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>function_called</key>
		<dict>
			<key>begin</key>
			<string>\b([A-Z]+\w+)\b\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.function.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.function.called.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function_call_scope</string>
				</dict>
			</array>
		</dict>
		<key>implementation_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable_declared</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_implemented</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#routine_implemented</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>method_called</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\.(\w+)</string>
			<key>name</key>
			<string>meta.method.called.pascal</string>
		</dict>
		<key>method_called_noparams</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\.([a-zA-Z_.]+)</string>
			<key>name</key>
			<string>meta.method.called.noparams.pascal</string>
		</dict>
		<key>method_called_with_parameters</key>
		<dict>
			<key>begin</key>
			<string>\.(\w+)\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.method.called.parameters.pascal</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.method.called.parameters.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function_call_scope</string>
				</dict>
			</array>
		</dict>
		<key>method_chain_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method_called_with_parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method_called</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>method_class_declared</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(class))\s*\b(?i:(function|procedure|constructor|destructor))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.method.class.declared.pascal</string>
		</dict>
		<key>method_declared</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(?i:(function|procedure|constructor|destructor))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.method.declared.pascal</string>
		</dict>
		<key>method_implemented</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.pascal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.pascal</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(?i:(class)*)\b\s*\b(?i:(function|procedure|constructor|destructor))\b\s+(\w+)(\.)(\w+)</string>
			<key>name</key>
			<string>meta.method.implemented.pascal</string>
		</dict>
		<key>property_declared</key>
		<dict>
			<key>begin</key>
			<string>^\s*(?i:(property)+)\s+(\w+)\s*:\s*</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.method.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>;</string>
			<key>name</key>
			<string>meta.property.declared.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>record_declared</key>
		<dict>
			<key>begin</key>
			<string>^\s*(\w+)\s*:\s*(?i:(bitpacked)\s+)*(?i:(record))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.type.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.record.pascal</string>
			<key>end</key>
			<string>^\s*\b(?i:(end))\b;</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.record.instance.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#record_scope</string>
				</dict>
			</array>
		</dict>
		<key>record_field</key>
		<dict>
			<key>begin</key>
			<string>^\s*([a-zA-Z0-9_, ]+)\s*:</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.field.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.record.field.pascal</string>
			<key>end</key>
			<string>;</string>
			<key>name</key>
			<string>meta.record.field.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>record_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#record_field</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>routine_implemented</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*\b(?i:(function|procedure))\b\s+(\w+)</string>
			<key>name</key>
			<string>meta.function.implemented.pascal</string>
		</dict>
		<key>type_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#defined_set_constants</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>uses_scope</key>
		<dict/>
		<key>variable_declared</key>
		<dict>
			<key>begin</key>
			<string>^\s*([a-zA-Z0-9_,]+)\s*:\s+</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.pascal</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.scope.variable.definition.pascal</string>
			<key>end</key>
			<string>;</string>
			<key>name</key>
			<string>meta.variable.definition.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable_scope</string>
				</dict>
			</array>
		</dict>
		<key>variable_scope</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.pascal</string>
	<key>uuid</key>
	<string>F42FA544-6B1C-11D9-9517-000D93589AF6</string>
</dict>
</plist>
